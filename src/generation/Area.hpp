/* This file is part of the Rune of the Eldest.
The Rune of the Eldest - Roguelike about the mage seeking for ancient knowledges
Copyright (C) 2023  PJutch

The Rune of the Eldest is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

The Rune of the Eldest is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with the Rune of the Eldest. 
If not, see <https://www.gnu.org/licenses/>. */

#ifndef AREA_HPP_
#define AREA_HPP_

#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>

#include <utility>
#include <vector>
#include <span>

namespace generation {
    /// @brief Dungeon area generated by bsp
    /// @details Contains rect and passage lists for each side
    class Area {
    public:
        /// @brief Creates area
        /// @param area_ area bounding rect
        explicit Area(sf::IntRect area_) : area{ area_ } {}

        /// Left side of the area (min x)
        [[nodiscard]] int left() const noexcept {
            return area.left;
        }

        /// Top side of the area (min y)
        [[nodiscard]] int top() const noexcept {
            return area.top;
        }

        /// Right side of the area (max x)
        [[nodiscard]] int right() const noexcept {
            return area.left + area.width;
        }

        /// Bottom side of the area (max y)
        [[nodiscard]] int bottom() const noexcept {
            return area.top + area.height;
        }

        /// Width of the area (x size)
        [[nodiscard]] int width() const noexcept {
            return area.width;
        }

        /// Width of the area (y size)
        [[nodiscard]] int height() const noexcept {
            return area.height;
        }

        /// Area bounding rect
        [[nodiscard]] sf::IntRect bounds() const noexcept {
            return area;
        }

        /// Add passage on the left side of the area at (left(), y)
        void addLeftPassage(int y) noexcept {
            leftPassages_.push_back(y);
        }

        /// Add passage on the top side of the area at (x, top())
        void addTopPassage(int x) noexcept {
            topPassages_.push_back(x);
        }

        /// Add passage on the right side of the area at (right(), y)
        void addRightPassage(int y) noexcept {
            rightPassages_.push_back(y);
        }

        /// Add passage on the bottom side of the area at (x, bottom())
        void addBottomPassage(int x) noexcept {
            bottomPassages_.push_back(x);
        }

        /// All passage on the left side of the area at (left(), *)
        [[nodiscard]] std::span<const int> leftPassages() const noexcept {
            return leftPassages_;
        }

        /// All passage on the top side of the area at (*, top())
        [[nodiscard]] std::span<const int> topPassages() const noexcept {
            return topPassages_;
        }

        /// All passage on the right side of the area at (right(), *)
        [[nodiscard]] std::span<const int> rightPassages() const noexcept {
            return rightPassages_;
        }

        /// All passage on the bottom side of the area at (*, bottom())
        [[nodiscard]] std::span<const int> bottomPassages() const noexcept {
            return bottomPassages_;
        }

        /// Splits area horizontally
        [[nodiscard]] std::pair<Area, Area> splitX(int boundary) const noexcept;

        /// Splits area vertically
        [[nodiscard]] std::pair<Area, Area> splitY(int boundary) const noexcept;
    private:
        sf::IntRect area;

        std::vector<int> leftPassages_;
        std::vector<int> topPassages_;
        std::vector<int> rightPassages_;
        std::vector<int> bottomPassages_;
    };
}

#endif